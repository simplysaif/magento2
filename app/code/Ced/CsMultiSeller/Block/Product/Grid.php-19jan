<?php
/**
  * CedCommerce
  *
  * NOTICE OF LICENSE
  *
  * This source file is subject to the End User License Agreement (EULA)
  * that is bundled with this package in the file LICENSE.txt.
  * It is also available through the world-wide-web at this URL:
  * https://cedcommerce.com/license-agreement.txt
  *
  * @category    Ced
  * @package     Ced_CsMultiSeller
  * @author      CedCommerce Core Team <connect@cedcommerce.com >
  * @copyright   Copyright CEDCOMMERCE (https://cedcommerce.com/)
  * @license      https://cedcommerce.com/license-agreement.txt
  */
/**
 * Manage products grid block
 *
 * @category   Ced
 * @package    Ced_CsMultiSeller
 * @author 	   CedCommerce Core Team <connect@cedcommerce.com >
 */
namespace Ced\CsMultiSeller\Block\Product;
class Grid extends \Magento\Backend\Block\Widget\Grid\Extended
{
	
	/**
	 * Massaction block name
	 *
	 * @var string
	 */
	//protected $_massactionBlockName = 'csmarketplace/widget_grid_massaction';

	/**
	 * @var \Magento\Framework\Module\Manager
	 */
	protected $moduleManager;
	
	/**
	 * @var  \Ced\CsMarketplace\Model\VproductsFactory
	 */
	protected $vproductsFactory;
	
	/**
	 * @var  \Ced\CsMarketplace\Model\Vproducts
	 */
	protected $_vproducts;
	
	/**
	 * @var  \Magento\Framework\ObjectManagerInterface
	 */
	protected $_objectManager;
	protected $_status;
	
	protected $_massactionBlockName = 'Ced\CsMultiSeller\Block\Product\Grid\Massaction';
	
	/**
	 * @var \SR\Weblog\Model\Status
	 */
	// protected $_status;
	
	/**
	 * @param \Magento\Backend\Block\Template\Context $context
	 * @param \Magento\Backend\Helper\Data $backendHelper
	 * @param \SR\Weblog\Model\BlogPostsFactory $blogPostFactory
	 * @param \SR\Weblog\Model\Status $status
	 * @param \Magento\Framework\Module\Manager $moduleManager
	 * @param array $data
	 *
	 * @SuppressWarnings(PHPMD.ExcessiveParameterList)
	 */
	public function __construct(
			\Magento\Backend\Block\Template\Context $context,
			\Magento\Backend\Helper\Data $backendHelper,
			\Ced\CsMarketplace\Model\VproductsFactory $vproductsFactory,
			\Ced\CsMarketplace\Model\Vproducts $vproducts,
			\Magento\Framework\ObjectManagerInterface $objectManager,
			\Magento\Framework\Module\Manager $moduleManager,
			\Magento\Catalog\Model\Product\Attribute\Source\Status $status,
			\Magento\Framework\View\Model\PageLayout\Config\BuilderInterface $pageLayoutBuilder,
			array $data = []
	) {
		$this->_vproductsFactory = $vproductsFactory;
		$this->_vproducts = $vproducts;
		$this->_objectManager = $objectManager;
		$this->_status = $status;
		$this->pageLayoutBuilder = $pageLayoutBuilder;
		$this->moduleManager = $moduleManager;
		parent::__construct($context, $backendHelper, $data);
		$this->setData('area',"adminhtml");
	}
	
	/**
	 * Set grid parameters.
	 *
	 * @return void
	 */
	public function _construct()
	{
		parent::_construct();
		$this->setId('productGrid');
		$this->setDefaultSort('entity_id');
		//$this->setTemplate('csmarketplace/widget/grid.phtml');
		$this->setDefaultDir('DESC');
		$this->setSaveParametersInSession(true);
		$this->setUseAjax(true);
		$this->setVarNameFilter('product_filter');

	}

	/**
	 * @return int $storeId
	 */
	protected function _getStore()
	{
		$storeId = (int) $this->getRequest()->getParam('store', 0);
		return $this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->getStore($storeId);
	}
	
	/**
	 * @return $this
	 */
	
	protected function _addColumnFilterToCollection($column)
	{
		if ($this->getCollection()) {
			if ($column->getId() == 'websites') {
				$this->getCollection()->joinField('websites',
						'catalog_product_website',
						'website_id',
						'product_id=entity_id',
						null,
						'left');
			}
		}
		return parent::_addColumnFilterToCollection($column);
	}
	/**
	 * Prepares Mass Action
	 * @return $this
	 */
	protected function _prepareMassaction()
	{
		$this->setMassactionIdField('entity_id');
		$this->getMassactionBlock()->setTemplate('Magento_Catalog::product/grid/massaction_extended.phtml');
		$this->getMassactionBlock()->setFormFieldName('product');
	
		$this->getMassactionBlock()->addItem(
				'delete',
				[
						'label' => __('Delete'),
						'url' => $this->getUrl('*/*/massDelete'),
						'confirm' => __('Are you sure?')
				]
		);
	
		$statuses = $this->_status->getOptionArray();
	
		array_unshift($statuses, ['label' => '', 'value' => '']);
		$this->getMassactionBlock()->addItem(
				'status',
				[
						'label' => __('Change Status'),
						'url' => $this->getUrl('*/*/massStatus', ['_current' => true]),
						'additional' => [
								'visibility' => [
										'name' => 'status',
										'type' => 'select',
										'class' => 'required-entry',
										'label' => __('Status'),
										'values' => $statuses
								]
						]
				]
		);
	
		
	
		//$this->_eventManager->dispatch('adminhtml_catalog_product_grid_prepare_massaction', ['block' => $this]);
		return $this;
	}
	
	/**
	 * Prepares Grid Collection
	 *
	 * @return $this
	 */
	protected function _prepareCollection()
	{   

		$vproducts = array();
		$vproducts = $this->_objectManager->get('Ced\CsMultiSeller\Model\Multisell')->getVendorProductIds();
		$store = $this->_getStore();
		$types= $this->_objectManager->get('Ced\CsMultiSeller\Model\System\Config\Source\Type')->toFilterOptionArray(true,false,$store->getId());
		$allowedProductTypes = array_keys($types);
		$store = $this->_getStore();
		$this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->setCurrentStore(\Magento\Store\Model\Store::DEFAULT_STORE_ID);
		//Mage::app()->setCurrentStore(Mage_Core_Model_App::ADMIN_STORE_ID);
		$collection = $this->_objectManager->get('Magento\Catalog\Model\Product')->getCollection();
		$collection = $collection->addAttributeToSelect('sku')
						->addAttributeToSelect('name')
						->addAttributeToSelect('attribute_set_id')
						->addAttributeToSelect('type_id')
						->addAttributeToFilter('type_id',array('in'=>$allowedProductTypes))
						->addFieldToFilter('entity_id',array('in'=>$vproducts));
	
		if ($this->moduleManager->isEnabled('Magento_CatalogInventory')) {
			$collection->joinField('qty',
					'cataloginventory_stock_item',
					'qty',
					'product_id=entity_id',
					'{{table}}.stock_id=1',
					'left');
		}
	
		if ($store->getId()) {
			$collection->addStoreFilter($store);
			$collection->joinAttribute(
					'name',
					'catalog_product/name',
					'entity_id',
					null,
					'inner',
					$store->getId()
			);
			$collection->joinAttribute(
					'status',
					'catalog_product/status',
					'entity_id',
					null,
					'inner',
					$store->getId()
			);
			$collection->joinAttribute(
					'visibility',
					'catalog_product/visibility',
					'entity_id',
					null,
					'inner',
					$store->getId()
			);
			$collection->joinAttribute(
					'price',
					'catalog_product/price',
					'entity_id',
					null,
					'left',
					$store->getId()
			);
		}
		else {
			$collection->addAttributeToSelect('price');
			$collection->joinAttribute('status', 'catalog_product/status', 'entity_id', null, 'inner');
			$collection->joinAttribute('visibility', 'catalog_product/visibility', 'entity_id', null, 'inner');
		}
		$collection->joinField('check_status','ced_csmarketplace_vendor_products', 'check_status','product_id=entity_id',null,'left');
		$collection->joinField('parent_id','ced_csmarketplace_vendor_products', 'parent_id','product_id=entity_id',null,'left');

		$collection->addWebsiteNamesToResult();
		$this->setCollection($collection);	
		parent::_prepareCollection();
		return $this;
	}
	
	/**
	 * Prepares Grid Columns
	 */
	protected function _prepareColumns()
	{
		$store = $this->_getStore();
		$this->addColumn('entity_id',
				[
						'header'=> __('ID'),
						'width' => '5px',
						'type'  => 'number',
						'align'     => 'left',
						'index' => 'entity_id',
						'renderer'=>'\Ced\CsMultiSeller\Block\Product\Renderer\Productid'
				]);
		$this->addColumn('name',
				[
						'header'=> __('Name'),
						'index' => 'name',
						'type' => 'text'
						//'renderer' => '\Ced\CsMultiSeller\Block\Product\Renderer\Productimage',
        				//'filter_condition_callback' => array($this, '_productNameFilter')
				]);
		$this->addColumn('sku',
				[
						'header'=> __('Sku'),
						'index' => 'sku',
						//'renderer' => '\Ced\CsMultiSeller\Block\Product\Renderer\Productimage',
						'filter_condition_callback' => array($this, '_productNameFilter')
				]);
		if(count($this->_objectManager->get('Ced\CsMultiSeller\Model\System\Config\Source\Type')->toFilterOptionArray(true,false,$store->getId()))>1){
			$this->addColumn('type_id',
					[
							'header'=> __('Type'),
							'width' => '10px',
							'index' => 'type_id',
							'type'  => 'options',
							'options' => $this->_objectManager->get('Ced\CsMultiSeller\Model\System\Config\Source\Type')->toFilterOptionArray(true,false,$store->getId()),
					]);
		}
		$this->addColumn('price',
				[
						'header'=> __('Price'),
						'type'  => 'price',
						'currency_code' => $store->getBaseCurrency()->getCode(),
						'index' => 'price',
				]);
	
		if ($this->moduleManager->isEnabled('Magento_CatalogInventory')) {
			$this->addColumn('qty',
					[
							'header'=> __('Qty'),
							'width' => '50px',
							'type'  => 'number',
							'index' => 'qty',
					]);
		}
		$this->addColumn('check_status',
				[
						'header'=> __('Status'),
						'width' => '70px',
						'index' => 'check_status',
						'type'  => 'options',
						'renderer'=>'Ced\CsMultiSeller\Block\Product\Renderer\Productstatus',
						'options' => $this->_objectManager->get('Ced\CsMarketplace\Model\Vproducts')->getVendorOptionArray(),
						'filter_condition_callback' => array($this, '_productStatusFilter')
				]);
		
		//if (!$this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->isSingleStoreMode() && $this->_objectManager->get('Ced\CsMarketplace\Helper\Data')->isSharingEnabled()) {
		if (!$this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->isSingleStoreMode()) {
			$this->addColumn('websites',
					[
							'header'=> __('Websites'),
							'width' => '100px',
							'index'     => 'websites',
							'type'      => 'options',
							'options'   => $this->_objectManager->get('Magento\Store\Model\WebsiteFactory')->create()->getCollection()->toOptionHash()
					]);
		}
			
	
		return parent::_prepareColumns();
	}
	
	/**
	 * Prepares Filter Buttons
	 */
	protected function _prepareFilterButtons()
	{
		 $this->addChild(
				'submit_button',
				'Magento\Backend\Block\Widget\Button',
				[
						'label' => __('Submit'),
						'class' => 'save submit-button primary',
						'onclick' => 'submitShipment(this);',
						'area' => 'adminhtml'
				]
		); 
		$this->setChild(
				'reset_filter_button',
				$this->getLayout()->createBlock(
						'Magento\Backend\Block\Widget\Button'
				)->setData(
						[
								'label' => __('Reset Filter'),
								'onclick' => $this->getJsObjectName() . '.resetFilter()',
								'class' => 'action-reset action-tertiary',
								'area' => 'adminhtml'
						]
				)->setDataAttribute(['action' => 'grid-filter-reset'])
		);
		$this->setChild(
				'search_button',
				$this->getLayout()->createBlock(
						'Magento\Backend\Block\Widget\Button'
				)->setData(
						[
								'label' => __('Search'),
								'onclick' => $this->getJsObjectName() . '.doFilter()',
								'class' => 'action-secondary',
								'area' => 'adminhtml'
						]
				)->setDataAttribute(['action' => 'grid-filter-apply'])
		);
	}
	
	/**
	 * @return $this
	 */
		protected function _productNameFilter($collection, $column){
		if (!$value = $column->getFilter()->getValue()) {
			return $this;
		}
		$this->getCollection()
		->addAttributeToFilter('name', array('like' => '%'.$column->getFilter()->getValue().'%'));
		 
		return $this;
	}

	/**
	 * @return $this
	 */
	protected function _productStatusFilter($collection, $column){
		if(!strlen($column->getFilter()->getValue())) {
			return $this;
		}
		if($column->getFilter()->getValue()==\Ced\CsMarketplace\Model\Vproducts::APPROVED_STATUS.\Magento\Catalog\Model\Product\Attribute\Source\Status::STATUS_ENABLED){
			$this->getCollection()
			->addAttributeToFilter('check_status', array('eq' =>\Ced\CsMarketplace\Model\Vproducts::APPROVED_STATUS))
			->addAttributeToFilter('status', array('eq' =>\Magento\Catalog\Model\Product\Attribute\Source\Status::STATUS_ENABLED));
		}
		else if($column->getFilter()->getValue()==\Ced\CsMarketplace\Model\Vproducts::APPROVED_STATUS.\Magento\Catalog\Model\Product\Attribute\Source\Status::STATUS_DISABLED){
			$this->getCollection()
			->addAttributeToFilter('check_status', array('eq' =>\Ced\CsMarketplace\Model\Vproducts::APPROVED_STATUS))
			->addAttributeToFilter('status', array('eq' =>\Magento\Catalog\Model\Product\Attribute\Source\Status::STATUS_DISABLED));
		}
		else 
			$this->getCollection()->addAttributeToFilter('check_status', array('eq' =>$column->getFilter()->getValue()));
		return $this;
	}
	
	/**
	 * Return Grid Url
	 */
	public function getGridUrl()
	{
		return $this->getUrl('*/*/gridproduct',array(
				'store'=>$this->getRequest()->getParam('store')));
	}
	
	/**
	 * Return Row Url
	 */
	public function getRowUrl($row)
	{
		return $this->getUrl('*/*/edit', array(
				'store'=>$this->getRequest()->getParam('store'),
				'id'=>$row->getId())
		);
	}

}
