<?php 
/**
 * CedCommerce
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the End User License Agreement (EULA)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://cedcommerce.com/license-agreement.txt
 *
 * @category    Ced
 * @package     Ced_CsMultiSeller
 * @author      CedCommerce Core Team <connect@cedcommerce.com>
 * @copyright   Copyright CedCommerce (http://cedcommerce.com/)
 * @license     http://cedcommerce.com/license-agreement.txt
 */
namespace Ced\CsMultiSeller\Controller\Product;
use Magento\Customer\Model\Session;

use Magento\Framework\App\Action\Context;
use Magento\Framework\Controller\Result;
use Magento\Framework\View\Result\PageFactory;
class Duplicate extends \Ced\CsMarketplace\Controller\Vendor
{
	
	
	/**
     * @var \Magento\Catalog\Model\Product\Copier
     */
    protected $productCopier;


    /**
     * @param Context $context
     * @param Session $customerSession
     * @param PageFactory $resultPageFactory
     * @param UrlFactory $urlFactory
     * @param ModuleFactory $moduleManager
     * @param ProductFactory $productCopier
     */
    
    public function __construct(
<<<<<<< HEAD
    		Context $context,
    		Session $customerSession,
    		PageFactory $resultPageFactory,
    		\Magento\Framework\UrlFactory $urlFactory,
    		\Magento\Framework\Module\Manager $moduleManager,
    		\Magento\Catalog\Model\Product\Copier $productCopier
    ) {
    	$this->productCopier  = $productCopier;
    	parent::__construct($context,$customerSession,$resultPageFactory,$urlFactory,$moduleManager);

    	//     $this->resultJsonFactory = $this->_objectManager->create('Magento\Framework\Controller\Result\JsonFactory');
=======
    	Context $context,
    	Session $customerSession,
    	PageFactory $resultPageFactory,
    	\Magento\Framework\UrlFactory $urlFactory,
    	\Magento\Framework\Module\Manager $moduleManager,
    	\Magento\Catalog\Model\Product\Copier $productCopier
    ) {
    	$this->productCopier  = $productCopier;
    	parent::__construct($context,$customerSession,$resultPageFactory,$urlFactory,$moduleManager);
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
    }
     
   	/**
	 *  \Ced\CsMarketplace\Controller\Vendor::dispatch() 
	 */
   
<<<<<<< HEAD
     public function dispatch(\Magento\Framework\App\RequestInterface $request)
    {	
=======
    public function dispatch(\Magento\Framework\App\RequestInterface $request){	
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
    
    	
    	if($this->_objectManager->get('Magento\Framework\Registry')->registry('ced_csmarketplace_current_store'))
    
    		$this->_objectManager->get('Magento\Framework\Registry')->unRegister('ced_csmarketplace_current_store');
    
    	if($this->_objectManager->get('Magento\Framework\Registry')->registry('ced_csmarketplace_current_website'))
    
    		$this->_objectManager->get('Magento\Framework\Registry')->unRegister('ced_csmarketplace_current_website');
    
    	$this->_objectManager->get('Magento\Framework\Registry')->register('ced_csmarketplace_current_store',$this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->getStore()->getId());
    
    	$this->_objectManager->get('Magento\Framework\Registry')->register('ced_csmarketplace_current_website',$this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->getStore()->getWebsiteId());
<<<<<<< HEAD
    	return parent::dispatch($request);
=======
    	parent::dispatch($request);
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
    
    }
    
    /**
     * Create product duplicate
     */
    public function execute()
<<<<<<< HEAD
    {       
    		$vproducts = $this->_objectManager->get('Ced\CsMultiSeller\Model\Multisell')->getVendorProductIds();
    		$productCount=count($this->_objectManager->get('Ced\CsMarketplace\Model\Vproducts')->getVendorProductIds($this->_getSession()->getVendorId()))+count($vproducts);

    		if($productCount >= $this->_objectManager->get('Ced\CsMarketplace\Helper\Data')->getVendorProductLimit()){ 
    			$this->messageManager->addError($this->__('Product Creation limit has Exceeded'));    	
    			$this->_redirect('*/*/index',array('store'=>$this->getRequest()->getParam('store', 0)));    	
    			return;    	
    		}
    		
    		if(!$this->_getSession()->getVendorId())    	
    			return;
    		
    		$this->mode = \Ced\CsMarketplace\Model\Vproducts::NEW_PRODUCT_MODE;
    	
    		if(!$this->_objectManager->get('Ced\CsMultiSeller\Helper\Data')->isEnabled()) {    	
    			$this->_redirect('csmarketplace/vendor/index');    	
    			return;    	
    		}
    	
    		if($this->getRequest()->getParam('id','')==''){    	
    			$this->_redirect ('csmultiseller/product/new');    	
    			return;    	
    		}

    		$customData = $this->getRequest()->getPost();    	
    		$productErrors=array();    	
    		$vproductModel = $this->_objectManager->get('Ced\CsMultiSeller\Model\Multisell');    	
    		$vproductModel->addData(isset($customData['product'])?$customData['product']:'');    	
    		$vproductModel->addData(isset($customData['product']['stock_data'])?$customData['product']['stock_data']:'');    	
    		$productErrors=$vproductModel->validate();
    	
    		if (!empty($productErrors)) {    	
    			foreach ($productErrors as $message) {    	
    				$this->messageManager->addError($message);    	
    			}
    	
    			$this->_redirect('*/*/assign', array('id'=>$this->getRequest()->getParam('id'),'store'=>$this->getRequest()->getParam('store',0)));
    	  		return;    	
    		}
    	    	
    		$product = $this->_initProduct();
    	
    		$customData = $this->getRequest()->getPost();    	
    		
    		try {    	
    			if(count($customData)>0){    	
    				$this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->setCurrentStore(\Magento\Store\Model\Store::DEFAULT_STORE_ID);    	
    			   
    				$newProduct = $this->productCopier->copy($product);    
    				
    			//	$newProduct->setWebsiteId(1);
    				$newProduct->setStoreId($product->getStoreId());    
    			//	print_r($newProduct->getData());die;	
    				$this->_objectManager->get('Ced\CsMultiSeller\Model\Multisell')->setStoreId($product->getStoreId())->saveProduct($this->mode,$newProduct,$product);
    	 			$this->setCurrentStore();    	
    				$this->messageManager->addSuccess(__('The product has been saved.'));    	
    			}
    	
    			else{    	
    				$this->messageManager->addError(__('Unable to save Product.'));    	
    			}
    	
    			$this->_redirect('*/*/index', array('store'=>$product->getStoreId()));
    	return;
    		}
    	
    		catch (Exception $e) {    	
    			$this->messageManager->addError($e->getMessage());
                echo $e->getMessage();die('====>');    	
    			$this->_redirect('*/*/index', array('store'=>$product->getStoreId()));    	
    		}   	
=======
    {
    	$vproducts = $this->_objectManager->get('Ced\CsMultiSeller\Model\Multisell')->getVendorProductIds();
    	$productCount=count($this->_objectManager->get('Ced\CsMarketplace\Model\Vproducts')->getVendorProductIds($this->_getSession()->getVendorId()))+count($vproducts);

    	if($productCount >= $this->_objectManager->get('Ced\CsMarketplace\Helper\Data')->getVendorProductLimit()){ 
    		$this->messageManager->addError($this->__('Product Creation limit has Exceeded'));    	
    		$this->_redirect('*/*/index',array('store'=>$this->getRequest()->getParam('store', 0)));    	
    		return;    	
    	}
    		
    	if(!$this->_getSession()->getVendorId())    	
    		return;
    		
    	$this->mode = \Ced\CsMarketplace\Model\Vproducts::NEW_PRODUCT_MODE;
    	
    	if(!$this->_objectManager->get('Ced\CsMultiSeller\Helper\Data')->isEnabled()) {    	
    		$this->_redirect('Ced\CsMarketplace\Vendor\Index');    	
    		return;    	
    	}
    	
		if($this->getRequest()->getParam('id','')==''){    	
			$this->_redirect ('Ced\CsMultiseller\Product\New');    	
			return;    	
		}
    	
		$customData = $this->getRequest()->getPostValue();    	
		
		$productErrors=array();    	
		$vproductModel = $this->_objectManager->get('Ced\CsMultiSeller\Model\Multisell');    	
		$vproductModel->addData(isset($customData['product'])?$customData['product']:'');    	
		$vproductModel->addData(isset($customData['product']['stock_data'])?$customData['product']['stock_data']:'');
	
		$productErrors=$vproductModel->validate();
	
		if (!empty($productErrors)) {    	
			foreach ($productErrors as $message) {    	
				$this->messageManager->addError($message);    	
			}
	
			$this->_redirect('*/*/assign', array('id'=>$this->getRequest()->getParam('id'),'store'=>$this->getRequest()->getParam('store',0)));
	  		return;    	
		}
    	    	
		$product = $this->_initProduct();
		
	
		$customData = $this->getRequest()->getPost();    	
    		
		try {    	
		
			if(count($customData)>0){    	
				$this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->setCurrentStore($this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->getStore()->getId());
                //$p = $this->getRequest()->getParam('product');

                //$product->setSku($p['sku']);
                //$product->setUrlKey($product->getSku().'old'.'129');
				$newProduct = $this->productCopier->copy($product); 
               
               
                
                $newProduct->setStoreId($product->getStoreId()); 
                //$newProduct->setUrlKey($product->getSku().'new'.'208');
                $newProduct->save();

                $product=$this->_objectManager->create('\Magento\Catalog\Model\Product')->load($this->getRequest()->getParam('id'));
				$status = $this->_objectManager->get('Ced\CsMultiSeller\Model\Multisell')->setStoreId($product->getStoreId())->saveProduct($this->mode,$newProduct,$product);
	 			if($status==false){
                    $this->messageManager->addError(__('Unable to save Product.'));
                    $this->_redirect('*/*/index', array('store'=>$product->getStoreId()));
                    return;
                }
                $this->setCurrentStore();    	
				$this->messageManager->addSuccess(__('The product has been saved.'));
               	
			}
	
			else{    	
				$this->messageManager->addError(__('Unable to save Product.'));    	
			}
	
			$this->_redirect('*/*/index', array('store'=>$product->getStoreId()));
            return;
	
		}
		catch (Exception $e) {    	
			$this->messageManager->addError($e->getMessage());  	
			$this->_redirect('*/*/index', array('store'=>$product->getStoreId()));
            return;   	
		} 	
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
    }
    
    /**    
    * Initialize product from request parameters    
    *    
    * @return Magento\Catalog\Model\Product    
    */
<<<<<<< HEAD
   	 protected function _initProduct()
   	 {   
=======
   	protected function _initProduct(){   
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
    	if(!$this->_getSession()->getVendorId())    
    		return;
    
    	$productId  = (int) $this->getRequest()->getParam('id');   
<<<<<<< HEAD
    	$this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->setCurrentStore(\Magento\Store\Model\Store::DEFAULT_STORE_ID);
=======
    	$this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->setCurrentStore($this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->getStore()->getId());
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
    	   
    	$product = $this->_objectManager->get('Magento\Catalog\Model\Product');   
    	
    	if (!$productId) {    
<<<<<<< HEAD
    		$product->setStoreId(0);    
=======
    		$product->setStoreId($this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->getStore()->getId());    
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
    		if ($setId = (int) $this->getRequest()->getParam('set')) {    
    			$product->setAttributeSetId($setId);    
    		}
    
    		if ($typeId = $this->getRequest()->getParam('type')) {    
    			$product->setTypeId($typeId);    
    		}    
    	}
    
    	$product->setData('_edit_mode', true);    
<<<<<<< HEAD
    	if ($productId) {    
=======
    	if ($productId) { 
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
    		$storeId = 0;    
    		if($this->mode==\Ced\CsMarketplace\Model\Vproducts::EDIT_PRODUCT_MODE && $this->getRequest()->getParam('store')){  
    			$websiteId = $this->_objectManager->get('Magento\Store\Model\Store')->load($this->getRequest()->getParam('store'))->getWebsiteId();   
    		
    			if($websiteId){    
    				if(in_array($websiteId,$this->_objectManager->get('Ced\CsMarketplace\Model\Vproducts')->getAllowedWebsiteIds())){    
    					$storeId=$this->getRequest()->getParam('store');    
<<<<<<< HEAD
    				}    
    			}    
    		}
    
    		try {    
    			$product->setStoreId($storeId)->load($productId);    
    		} catch (Exception $e) {    
    			$product->setTypeId(\Magento\Catalog\Model\Product\Type::DEFAULT_TYPE);    
    			//Mage::logException($e);    
    		}
    
    	}
    
    	$attributes = $this->getRequest()->getParam('attributes');    
    	if ($attributes && $product->isConfigurable() &&    
    			(!$productId || !$product->getTypeInstance()->getUsedProductAttributeIds())) {    
    				$product->getTypeInstance()->setUsedProductAttributeIds(    
    						explode(",", base64_decode(urldecode($attributes)))    
    				);
=======
    				}
    			}
    		}
    
    		try {  
    			$product->setStoreId($this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->getStore()->getId())->load($productId);
    		} catch (Exception $e) {  
    			$product->setTypeId(\Magento\Catalog\Model\Product\Type::DEFAULT_TYPE);  
    		}
    	}
    
    	$attributes = $this->getRequest()->getParam('attributes');
    	if ($attributes && $product->isConfigurable() && (!$productId || !$product->getTypeInstance()->getUsedProductAttributeIds())) {
    			$product->getTypeInstance()->setUsedProductAttributeIds(explode(",", base64_decode(urldecode($attributes))));
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
        	}
       
    			// Required attributes of simple product for configurable creation
    
<<<<<<< HEAD
    			if ($this->getRequest()->getParam('popup')    
    					&& $requiredAttributes = $this->getRequest()->getParam('required')) {    
    						$requiredAttributes = explode(",", $requiredAttributes);    
    						foreach ($product->getAttributes() as $attribute) {    
    							if (in_array($attribute->getId(), $requiredAttributes)) {    
    								$attribute->setIsRequired(1);    
    							}    
    						}    
    					}
       
    					if ($this->getRequest()->getParam('popup')    
    							&& $this->getRequest()->getParam('product')    
    							&& !is_array($this->getRequest()->getParam('product'))    
    							&& $this->getRequest()->getParam('id', false) === false) {   
    								$configProduct = $this->_objectManager->get('Magento\Catalog\Model\ResourceModel\Product\Collection')    
    								->setStoreId(0)    
    								->load($this->getRequest()->getParam('product'))    
    								->setTypeId($this->getRequest()->getParam('type'));    
    
    
    								/* @var $configProduct Mage_Catalog_Model_Product */
    
    								$data = array();    
    								foreach ($configProduct->getTypeInstance()->getEditableAttributes() as $attribute) {
       
    									/* @var $attribute Mage_Catalog_Model_Resource_Eav_Attribute */
    
    									if(!$attribute->getIsUnique()    
    											&& $attribute->getFrontend()->getInputType()!='gallery'    
    											&& $attribute->getAttributeCode() != 'required_options'    
    											&& $attribute->getAttributeCode() != 'has_options'    
    											&& $attribute->getAttributeCode() != $configProduct->getIdFieldName()) {    
    												$data[$attribute->getAttributeCode()] = $configProduct->getData($attribute->getAttributeCode());
       											}   
    								}
    								//print_r($configProduct->getWebsiteIds());die;
    								$product->addData($data)    
    								->setWebsiteIds($configProduct->getWebsiteIds());    
    							}
    							
    							$this->_objectManager->get('\Magento\Framework\Registry')->register('product', $product);    
    							$this->_objectManager->get('\Magento\Framework\Registry')->register('current_product', $product);    
    						//	$this->setCurrentStore();    
    							return $product;   
=======
    	if ($this->getRequest()->getParam('popup') && $requiredAttributes = $this->getRequest()->getParam('required')) {    
    		$requiredAttributes = explode(",", $requiredAttributes);    
    		foreach ($product->getAttributes() as $attribute) {  
    			if (in_array($attribute->getId(), $requiredAttributes)) { 
    				$attribute->setIsRequired(1);    
    			}
    		}
    	}
       
    	if ($this->getRequest()->getParam('popup') && $this->getRequest()->getParam('product') && !is_array($this->getRequest()->getParam('product')) && $this->getRequest()->getParam('id', false) === false) {   
    		$configProduct = $this->_objectManager->get('Magento\Catalog\Model\ResourceModel\Product\Collection')    
    						    ->setStoreId($this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->getStore()->getId())    
    							->load($this->getRequest()->getParam('product'))    
    							->setTypeId($this->getRequest()->getParam('type'));
    
    
    
    		$data = array();    
    		foreach ($configProduct->getTypeInstance()->getEditableAttributes() as $attribute){
    			if(!$attribute->getIsUnique() && $attribute->getFrontend()->getInputType()!='gallery' && $attribute->getAttributeCode() != 'required_options' && $attribute->getAttributeCode() != 'has_options' && $attribute->getAttributeCode() != $configProduct->getIdFieldName()) {  
    				$data[$attribute->getAttributeCode()] = $configProduct->getData($attribute->getAttributeCode());
       			}   
    		}
    								//print_r($configProduct->getWebsiteIds());die;
    		$product->addData($data)->setWebsiteIds($configProduct->getWebsiteIds());
    	}
    							
    	$this->_objectManager->get('\Magento\Framework\Registry')->register('product', $product);
    	$this->_objectManager->get('\Magento\Framework\Registry')->register('current_product', $product);
    	//	$this->setCurrentStore();    
    	return $product;   
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
   	 }
    
   	 /**
   	  * Set current store
   	  */
   	 public function setCurrentStore(){
<<<<<<< HEAD
   	 
=======
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
   	 	if($this->_objectManager->get('Magento\Framework\Registry')->registry('ced_csmarketplace_current_store')) {
   	 
   	 		$currentStoreId = $this->_objectManager->get('Magento\Framework\Registry')->registry('ced_csmarketplace_current_store');
   	 
   	 		$this->_objectManager->get('Magento\Store\Model\StoreManagerInterface')->setCurrentStore($currentStoreId);
   	 
   	 	}
<<<<<<< HEAD
   	 
   	 }
}
    
=======
   	 }
}
>>>>>>> 252bbea1925c08e2165ba2e814c35b5e660fbd72
