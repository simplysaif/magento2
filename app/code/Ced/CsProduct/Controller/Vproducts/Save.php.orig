<?php
 /**
 * CedCommerce
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the End User License Agreement (EULA)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://cedcommerce.com/license-agreement.txt
 *
 * @category    Ced
 * @package     Ced_CsProduct
 * @author      CedCommerce Core Team <connect@cedcommerce.com>
 * @copyright   Copyright CedCommerce (http://cedcommerce.com/)
 * @license      http://cedcommerce.com/license-agreement.txt
 */

namespace Ced\CsProduct\Controller\Vproducts;

use Magento\Backend\App\Action;
use Magento\Catalog\Controller\Adminhtml\Product;
use Magento\Customer\Model\Session;
use Magento\Framework\UrlFactory;

class Save extends \Ced\CsMarketplace\Controller\Vproducts\Save
{
    /**
     * @var Initialization\Helper
     */
    protected $initializationHelper;

    /**
     * @var \Magento\Catalog\Model\Product\Copier
     */
    protected $productCopier;

    /**
     * @var \Magento\Catalog\Model\Product\TypeTransitionManager
     */
    protected $productTypeManager;

    /**
     * @var \Magento\Catalog\Api\ProductRepositoryInterface
     */
    protected $productRepository;
	
	/**
	 * The greatest value which could be stored in CatalogInventory Qty field
	 */

	const MAX_QTY_VALUE = 99999999.9999;

	/**
	 * Array of actions which can be processed without secret key validation
	 *
	 * @var array
	 */
	protected $_publicActions = array('edit');

	protected $mode = '';

    public function __construct(
       \Magento\Backend\App\Action\Context $context,
		\Magento\Catalog\Controller\Adminhtml\Product\Builder $productBuilder,
		Session $customerSession,
		\Magento\Catalog\Model\Product\TypeTransitionManager $productTypeManager,
<<<<<<< HEAD
        \Magento\Catalog\Model\Product\Copier $productCopier,
=======

>>>>>>> 5d6e22cb882af3a87863c6db35639b4f6d3651df
        \Magento\Framework\View\Result\PageFactory $resultPageFactory,
		 UrlFactory $urlFactory,
        \Magento\Backend\Model\View\Result\ForwardFactory $resultForwardFactory,
		\Magento\Framework\Module\Manager $moduleManager,
		\Magento\Catalog\Api\ProductRepositoryInterface $productRepository
    ) {
		parent::__construct($context,$customerSession,$resultPageFactory,$urlFactory,$moduleManager);
		$this->productBuilder = $productBuilder;
        $this->resultPageFactory = $resultPageFactory;
<<<<<<< HEAD
         $this->productCopier = $productCopier;
=======
>>>>>>> 5d6e22cb882af3a87863c6db35639b4f6d3651df
        $this->resultForwardFactory = $resultForwardFactory;
		$this->_session = $context->getSession();	
		$this->productTypeManager = $productTypeManager;
		$this->productRepository = $productRepository;
		
    }
	

    /**
     * Save product action
     *
     * @return \Magento\Backend\Model\View\Result\Redirect
     * @SuppressWarnings(PHPMD.CyclomaticComplexity)
     * @SuppressWarnings(PHPMD.NPathComplexity)
     */
	protected function _initProduct(){
		
		$storeManager = $this->_objectManager->get('Magento\Store\Model\StoreManagerInterface');
		$scopeConfig = $this->_objectManager->get('Magento\Framework\App\Config\ScopeConfigInterface');
		$storeId = $this->getRequest()->getParam('store');
		if(!$scopeConfig->getValue('ced_csmarketplace/general/ced_vproduct_activation', \Magento\Store\Model\ScopeInterface::SCOPE_STORE, $storeId)){
			return parent::_initProduct();
			//return;
		}
		
		if(!$this->_getSession()->getVendorId()){
			return;
		}
		$productId = $this->getRequest()->getParam('id');	
		if ($productId){
			$this->mode= \Ced\CsMarketplace\Model\Vproducts::EDIT_PRODUCT_MODE;
		}
		else{
			$this->mode = \Ced\CsMarketplace\Model\Vproducts::NEW_PRODUCT_MODE;
		}	
			
		return $this->mode;	
	}

	public function execute()
    {
	
    	$storeManager = $this->_objectManager->get('Magento\Store\Model\StoreManagerInterface');
    	$scopeConfig = $this->_objectManager->get('Magento\Framework\App\Config\ScopeConfigInterface');
    	$storeId = $this->getRequest()->getParam('store');
    	if(!$scopeConfig->getValue('ced_csmarketplace/general/ced_vproduct_activation', \Magento\Store\Model\ScopeInterface::SCOPE_STORE, $storeId)){
    		return parent::execute();
    	}
    	$data = $this->getRequest()->getPostValue();
		if($scopeConfig->getValue('ced_csmarketplace/general/ced_vproduct_activation','store',$storeManager->getStore()->getId())){
			$vendorId = $this->_getSession()->getVendorId();
			
			if(!$vendorId) {
				return;
			}
			$this->initializationHelper = $this->_objectManager->create('Magento\Catalog\Controller\Adminhtml\Product\Initialization\Helper');
			$storeId = $this->getRequest()->getParam('store');
			$redirectBack = $this->getRequest()->getParam('back', false);
			$productId = $this->getRequest()->getParam('id');

			$vendorProduct = false;
				
				if($productId && $vendorId){
					
					$vendorProduct = $this->_objectManager->get('Ced\CsMarketplace\Model\Vproducts')->isAssociatedProduct($vendorId,$productId);
					if(!$vendorProduct){
<<<<<<< HEAD
						$this->_redirect('*/*/', array('store'=>$storeId));
=======
						$this->_redirect('//', array('store'=>$storeId));
>>>>>>> 5d6e22cb882af3a87863c6db35639b4f6d3651df
						return;
					}
				} else{	
					
					if(count($this->_objectManager->get('Ced\CsMarketplace\Model\Vproducts')->getVendorProductIds($this->_getSession()->getVendorId())) >= $this->_objectManager->get('Ced\CsMarketplace\Helper\Data')->getVendorProductLimit()){
<<<<<<< HEAD
						//$this->_getSession()->addError(__('Product Creation limit has Exceeded'));
						$this->messageManager->addError(__('Product Creation limit has Exceeded'));
						$this->_redirect('*/*/index', array('store'=>$storeId));
=======
						
						$this->_getSession()->addError(__('Product Creation limit has Exceeded'));
						$this->_redirect('//index', array('store'=>$storeId));
>>>>>>> 5d6e22cb882af3a87863c6db35639b4f6d3651df
						return;
					}
					if(!$this->validateSetAndType()){
						
						$this->_redirect('*/*/new',array('_current'=>true));
						return;
					}
				}
			
			$data = $this->getRequest()->getPostValue();
			$productAttributeSetId = $this->getRequest()->getParam('set');
			$productTypeId = $this->getRequest()->getParam('type');
			
			if ($data) {
				$this->_initProduct();
				
				try {
					
					$product = $this->initializationHelper->initialize($this->productBuilder->build($this->getRequest()));
					
					$this->productTypeManager->processProduct($product);
					
					if (isset($data['product'][$product->getIdFieldName()])) {
						throw new \Magento\Framework\Exception\LocalizedException(__('Unable to save product'));
					}
					$originalSku = $product->getSku();
					
					$product->save();
<<<<<<< HEAD
				
=======
>>>>>>> 5d6e22cb882af3a87863c6db35639b4f6d3651df
					$this->_objectManager->get('\Magento\Framework\Registry')->register('saved_product',$product);
					$this->_objectManager->create('Ced\CsMarketplace\Model\Vproducts')->saveProduct($this->mode);
					
					/**
					 * dispatch event when new product is created
					 */
					if($this->mode == \Ced\CsMarketplace\Model\Vproducts::NEW_PRODUCT_MODE) {
						$this->_eventManager->dispatch('csmarketplace_vendor_new_product_creation', [
						 'product' => $product,
						 'vendor_id'  => $this->_getSession()->getVendorId(),
						]);
					}
					
					
					$this->handleImageRemoveError($data, $product->getId());
					$productId = $product->getId();
					$productAttributeSetId = $product->getAttributeSetId();
					$productTypeId = $product->getTypeId();

					/**
					 * Do copying data to stores
					 */
					if (isset($data['copy_to_stores'])) {
						foreach ($data['copy_to_stores'] as $storeTo => $storeFrom) {
							$this->_objectManager->create('Magento\Catalog\Model\Product')
								->setStoreId($storeFrom)
								->load($productId)
								->setStoreId($storeTo)
								->save();
						}
					}

					//$this->messageManager->addSuccess(__('You saved the product.'));
					if ($product->getSku() != $originalSku) {
						$this->messageManager->addNotice(
							__(
								'SKU for product %1 has been changed to %2.',
								$this->_objectManager->get('Magento\Framework\Escaper')->escapeHtml($product->getName()),
								$this->_objectManager->get('Magento\Framework\Escaper')->escapeHtml($product->getSku())
							)
						);
					}

					$this->_eventManager->dispatch(
						'controller_action_catalog_product_save_entity_after',
						['controller' => $this]
					);
<<<<<<< HEAD


					if ($redirectBack === 'duplicate') {
                    $newProduct = $this->productCopier->copy($product);
                


					$this->_objectManager->create('Ced\CsMarketplace\Model\Vproducts')->processPostSave(\Ced\CsMarketplace\Model\Vproducts::NEW_PRODUCT_MODE, $newProduct,$productData=array());

                    $this->messageManager->addSuccess(__('You duplicated the product.'));
                  }
				
				} catch (\Magento\Framework\Exception\LocalizedException $e) {
					
=======
				
				} catch (\Magento\Framework\Exception\LocalizedException $e) {
					print_r($e->getMessage());
>>>>>>> 5d6e22cb882af3a87863c6db35639b4f6d3651df
					$this->messageManager->addError($e->getMessage());
					$this->_session->setProductData($data);
					$redirectBack = $productId ? true : 'new';
				} catch (\Exception $e) {
					print_r($e->getMessage());
					$this->_objectManager->get('Psr\Log\LoggerInterface')->critical($e);
					$this->messageManager->addError($e->getMessage());
					$this->_session->setProductData($data);
					$redirectBack = $productId ? true : 'new';
				}
				
				$this->messageManager->addSuccess(__('You saved the product.'));

			} 
			
			else {
				$this->_redirect('csproduct/*/',['store' => $storeId]);
				$this->messageManager->addError('No data to save');
				return;
			}

			if ($redirectBack === 'new') {
				$this->_redirect('csproduct/*/new',['set' => $productAttributeSetId, 'type' => $productTypeId]);
				return;
<<<<<<< HEAD
			}
			
			elseif ($redirectBack === 'duplicate' && isset($newProduct)) {
            $this->_redirect(
                'csproduct/*/edit',
                ['id' => $newProduct->getEntityId(), 'back' => null, '_current' => true]
                  );
             }

			 elseif ($redirectBack) {
=======
			} elseif ($redirectBack) {
>>>>>>> 5d6e22cb882af3a87863c6db35639b4f6d3651df
				$this->_redirect('csproduct/*/edit',['id' => $productId, '_current' => true, 'set' => $productAttributeSetId]);
				return;
			} else {
				$this->_redirect('csproduct/*/', ['store' => $storeId]);
				return;
			}		
		}
		
		return $this->_redirect('csproduct/*/',['store' => $storeId]); 
	}

    /**
     * Notify customer when image was not deleted in specific case.
     * TODO: temporary workaround must be eliminated in MAGETWO-45306
     *
     * @param array $postData
     * @param int $productId
     * @return void
     */
    private function handleImageRemoveError($postData, $productId)
    {
        if (isset($postData['product']['media_gallery']['images'])) {
            $removedImagesAmount = 0;
            foreach ($postData['product']['media_gallery']['images'] as $image) {
                if (!empty($image['removed'])) {
                    $removedImagesAmount++;
                }
            }
            if ($removedImagesAmount) {
                $expectedImagesAmount = count($postData['product']['media_gallery']['images']) - $removedImagesAmount;
                $product = $this->productRepository->getById($productId);
                if ($expectedImagesAmount != count($product->getMediaGallery('images'))) {
                    $this->messageManager->addNotice(
                        __('The image cannot be removed as it has been assigned to the other image role')
                    );
                }
            }
        }
    }
	
	/**
	 * Validate Allowed Attribute Set And Product Type
	 */

	public function validateSetAndType($type='',$set=0){	
		$storeManager = $this->_objectManager->get('Magento\Store\Model\StoreManagerInterface');
		//$scopeConfig = $this->_objectManager->get('Magento\Framework\App\Config\ScopeConfigInterface');
			
		$allowedType = $this->_objectManager->get('Ced\CsMarketplace\Model\System\Config\Source\Vproducts\Type')->getAllowedType($storeManager->getStore()->getId());
		$allowedSet = $this->_objectManager->get('Ced\CsMarketplace\Model\System\Config\Source\Vproducts\Set')->getAllowedSet($storeManager->getStore()->getId());
		
		$secretkey = time();

		if($type=='')
			$type = $this->getRequest()->getParam ('type',$secretkey);

		if($set==0)
			$set= (int)$this->getRequest()->getParam ('set',0);

		if ($type == $secretkey || (in_array($type,$allowedType) && in_array($set,$allowedSet))) {
			return true;
		}
		return false;
	}
}
